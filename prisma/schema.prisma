// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String?
  role         String    @default("admin") // Puede ser "admin" o "customer"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orders       Order[]
  cart         Cart?
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  shortDescription String?
  price           Int
  discountPrice   Int?  
  stock           Int       @default(0)
  slug            String    @unique
  sku             String    @unique
  imageUrl        String?
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  categoryId      Int?      // Hacer categoryId opcional
  category        Category? @relation(fields: [categoryId], references: [id]) // Hacer category opcional
  orderItems      OrderItem[] @relation("OrderItemsOnProduct")
  cartItems       CartItem[] @relation("CartItemsOnProduct")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] // Relaci√≥n con productos
}

model Order {
  id           Int       @id @default(autoincrement())
  orderNumber  String    @unique
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  status       String    @default("pending") // Puede ser "pending", "completed", "shipped", etc.
  totalAmount  Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orderItems   OrderItem[]
}

model OrderItem {
  id           Int       @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  price        Decimal   @db.Decimal(10, 2)
  order        Order     @relation(fields: [orderId], references: [id])
  product      Product   @relation("OrderItemsOnProduct", fields: [productId], references: [id])
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  productId Int
  product   Product   @relation("CartItemsOnProduct", fields: [productId], references: [id])
  quantity  Int       @default(1)
  price     Decimal   @db.Decimal(10, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
